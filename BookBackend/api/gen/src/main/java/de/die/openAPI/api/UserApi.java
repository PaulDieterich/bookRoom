/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.die.openAPI.api;

import de.die.openAPI.model.CreateUserDto;
import de.die.openAPI.model.ErrorDto;
import de.die.openAPI.model.UpdateUserDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user : POST user
     *
     * @param createUserDto Create user (required)
     * @return  (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "createUsers",
        summary = "POST user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = ""),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "prod")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createUsers(
        @Parameter(name = "CreateUserDto", description = "Create user", required = true) @Valid @RequestBody CreateUserDto createUserDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{userId} : DELETE user/{id}
     *
     * @param userId ID of user to return (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "DELETE user/{id}",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = ""),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "prod")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteUser(
        @Parameter(name = "userId", description = "ID of user to return", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user : GET user
     *
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getAllUsers",
        summary = "GET user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = ""),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getAllUsers(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userId} : GET user/{id}
     *
     * @param userId ID of user to return (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getByIdUser",
        summary = "GET user/{id}",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = ""),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getByIdUser(
        @Parameter(name = "userId", description = "ID of user to return", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{userId} : PUT user/{id}
     *
     * @param userId ID of user to return (required)
     * @param updateUserDto  (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "updateUser",
        summary = "PUT user/{id}",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = ""),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "prod")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateUser(
        @Parameter(name = "userId", description = "ID of user to return", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "UpdateUserDto", description = "", required = true) @Valid @RequestBody UpdateUserDto updateUserDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
