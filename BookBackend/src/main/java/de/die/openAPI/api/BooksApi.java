/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.die.openAPI.api;

import de.die.openAPI.model.BookDto;
import de.die.openAPI.model.CreateBookDto;
import de.die.openAPI.model.ErrorDto;
import de.die.openAPI.model.UpdateUserDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Books", description = "the Books API")
public interface BooksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /books : POST books
     *
     * @param createBookDto Create book (required)
     * @return OK (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "createBook",
        summary = "POST books",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "201", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "prod")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/books",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BookDto> createBook(
        @Parameter(name = "CreateBookDto", description = "Create book", required = true) @Valid @RequestBody CreateBookDto createBookDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"discription\" : \"Der erste Band der Trilogie\", \"releaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"author\" : [ { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 }, { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 } ], \"isbn\" : \"978-3-16-148410-0\", \"publisher\" : \"xyz-publisher\", \"language\" : \"de\", \"id\" : 1234, \"label\" : \"Hörbuch\", \"title\" : \"The Lord of the Rings\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /books/{bookId} : DELETE books/{id}
     *
     * @param bookId ID of book to return (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deleteBook",
        summary = "DELETE books/{id}",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "prod")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/books/{bookId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteBook(
        @Parameter(name = "bookId", description = "ID of book to return", required = true, in = ParameterIn.PATH) @PathVariable("bookId") Long bookId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books/findByAuthor : GET books/findByAuthor
     *
     * @param authorId ID of author to return (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "findByAuthor",
        summary = "GET books/findByAuthor",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/findByAuthor",
        produces = { "application/json" }
    )
    default ResponseEntity<BookDto> findByAuthor(
        @Parameter(name = "authorId", description = "ID of author to return", required = true, in = ParameterIn.PATH) @PathVariable("authorId") Long authorId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"discription\" : \"Der erste Band der Trilogie\", \"releaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"author\" : [ { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 }, { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 } ], \"isbn\" : \"978-3-16-148410-0\", \"publisher\" : \"xyz-publisher\", \"language\" : \"de\", \"id\" : 1234, \"label\" : \"Hörbuch\", \"title\" : \"The Lord of the Rings\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books/findByLanguage : GET books/findByLanguage
     *
     * @param languageId  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "findByLanguage",
        summary = "GET books/findByLanguage",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/findByLanguage",
        produces = { "application/json" }
    )
    default ResponseEntity<BookDto> findByLanguage(
        @NotNull @Parameter(name = "languageId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "languageId", required = true) Long languageId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"discription\" : \"Der erste Band der Trilogie\", \"releaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"author\" : [ { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 }, { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 } ], \"isbn\" : \"978-3-16-148410-0\", \"publisher\" : \"xyz-publisher\", \"language\" : \"de\", \"id\" : 1234, \"label\" : \"Hörbuch\", \"title\" : \"The Lord of the Rings\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books : GET books
     *
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getAll",
        summary = "GET books",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BookDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BookDto>> getAll(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"discription\" : \"Der erste Band der Trilogie\", \"releaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"author\" : [ { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 }, { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 } ], \"isbn\" : \"978-3-16-148410-0\", \"publisher\" : \"xyz-publisher\", \"language\" : \"de\", \"id\" : 1234, \"label\" : \"Hörbuch\", \"title\" : \"The Lord of the Rings\" }, { \"discription\" : \"Der erste Band der Trilogie\", \"releaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"author\" : [ { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 }, { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 } ], \"isbn\" : \"978-3-16-148410-0\", \"publisher\" : \"xyz-publisher\", \"language\" : \"de\", \"id\" : 1234, \"label\" : \"Hörbuch\", \"title\" : \"The Lord of the Rings\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books/{bookId} : GET books/{id}
     *
     * @param bookId ID of book to return (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getBooksById",
        summary = "GET books/{id}",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/{bookId}",
        produces = { "application/json" }
    )
    default ResponseEntity<BookDto> getBooksById(
        @Parameter(name = "bookId", description = "ID of book to return", required = true, in = ParameterIn.PATH) @PathVariable("bookId") Long bookId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"discription\" : \"Der erste Band der Trilogie\", \"releaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"author\" : [ { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 }, { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 } ], \"isbn\" : \"978-3-16-148410-0\", \"publisher\" : \"xyz-publisher\", \"language\" : \"de\", \"id\" : 1234, \"label\" : \"Hörbuch\", \"title\" : \"The Lord of the Rings\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /books/{bookId} : PUT books/{id}
     *
     * @param bookId ID of book to return (required)
     * @param updateUserDto  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "updateBook",
        summary = "PUT books/{id}",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "prod")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/books/{bookId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BookDto> updateBook(
        @Parameter(name = "bookId", description = "ID of book to return", required = true, in = ParameterIn.PATH) @PathVariable("bookId") Long bookId,
        @Parameter(name = "UpdateUserDto", description = "", required = true) @Valid @RequestBody UpdateUserDto updateUserDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"discription\" : \"Der erste Band der Trilogie\", \"releaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"author\" : [ { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 }, { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 } ], \"isbn\" : \"978-3-16-148410-0\", \"publisher\" : \"xyz-publisher\", \"language\" : \"de\", \"id\" : 1234, \"label\" : \"Hörbuch\", \"title\" : \"The Lord of the Rings\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
