/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.die.openAPI.api;

import de.die.openAPI.model.CdDto;
import de.die.openAPI.model.CreateCdDto;
import de.die.openAPI.model.ErrorDto;
import de.die.openAPI.model.UpdateCdDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "CD", description = "the CD API")
public interface CdApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /cd : PUT cd
     *
     * @param createCdDto Create cd (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "createCd",
        summary = "PUT cd",
        tags = { "CD" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CdDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "prod")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cd",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CdDto> createCd(
        @Parameter(name = "CreateCdDto", description = "Create cd", required = true) @Valid @RequestBody CreateCdDto createCdDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"discription\" : \"Der erste Band der Trilogie\", \"artist\" : \"J.R.R. Tolkien\", \"id\" : 1234, \"label\" : \"Hörbuch\", \"title\" : \"The Lord of the Rings\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /cd/{cdId} : DELETE cd/{id}
     *
     * @param cdId ID of cd to return (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deleteCD",
        summary = "DELETE cd/{id}",
        tags = { "CD" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "prod")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/cd/{cdId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteCD(
        @Parameter(name = "cdId", description = "ID of cd to return", required = true, in = ParameterIn.PATH) @PathVariable("cdId") Long cdId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cd : GET cd
     *
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getAllCD",
        summary = "GET cd",
        tags = { "CD" },
        responses = {
            @ApiResponse(responseCode = "200", description = ""),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cd",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getAllCD(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cd/{cdId} : GET cd/{id}
     *
     * @param cdId ID of cd to return (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getCdById",
        summary = "GET cd/{id}",
        tags = { "CD" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CdDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cd/{cdId}",
        produces = { "application/json" }
    )
    default ResponseEntity<CdDto> getCdById(
        @Parameter(name = "cdId", description = "ID of cd to return", required = true, in = ParameterIn.PATH) @PathVariable("cdId") Long cdId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"discription\" : \"Der erste Band der Trilogie\", \"artist\" : \"J.R.R. Tolkien\", \"id\" : 1234, \"label\" : \"Hörbuch\", \"title\" : \"The Lord of the Rings\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /cd/{cdId} : PUT cd/{id}
     *
     * @param cdId ID of cd to return (required)
     * @param updateCdDto Update cd (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "updateCd",
        summary = "PUT cd/{id}",
        tags = { "CD" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CdDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "prod")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/cd/{cdId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CdDto> updateCd(
        @Parameter(name = "cdId", description = "ID of cd to return", required = true, in = ParameterIn.PATH) @PathVariable("cdId") Long cdId,
        @Parameter(name = "UpdateCdDto", description = "Update cd", required = true) @Valid @RequestBody UpdateCdDto updateCdDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"discription\" : \"Der erste Band der Trilogie\", \"artist\" : \"J.R.R. Tolkien\", \"id\" : 1234, \"label\" : \"Hörbuch\", \"title\" : \"The Lord of the Rings\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
